// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"tg-example/contracts"
	"tg-example/contracts/types"
)

type serverExampleService struct {
	svc contracts.ExampleService
	get ExampleServiceGet
}

type MiddlewareSetExampleService interface {
	Wrap(m MiddlewareExampleService)
	WrapGet(m MiddlewareExampleServiceGet)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerExampleService(svc contracts.ExampleService) *serverExampleService {
	return &serverExampleService{
		get: svc.Get,
		svc: svc,
	}
}

func (srv *serverExampleService) Wrap(m MiddlewareExampleService) {
	srv.svc = m(srv.svc)
	srv.get = srv.svc.Get
}

func (srv *serverExampleService) Get(ctx context.Context, req types.BaseRequest) (resp *types.BaseResponse, err error) {
	return srv.get(ctx, req)
}

func (srv *serverExampleService) WrapGet(m MiddlewareExampleServiceGet) {
	srv.get = m(srv.get)
}

func (srv *serverExampleService) WithTrace() {
	srv.Wrap(traceMiddlewareExampleService)
}

func (srv *serverExampleService) WithMetrics() {
	srv.Wrap(metricsMiddlewareExampleService)
}

func (srv *serverExampleService) WithLog() {
	srv.Wrap(loggerMiddlewareExampleService())
}
