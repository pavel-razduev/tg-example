// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service2

import (
	"context"
	"tg-example/contracts"
	"tg-example/contracts/types"
)

type serverService2 struct {
	svc contracts.Service2
	set Service2Set
}

type MiddlewareSetService2 interface {
	Wrap(m MiddlewareService2)
	WrapSet(m MiddlewareService2Set)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerService2(svc contracts.Service2) *serverService2 {
	return &serverService2{
		set: svc.Set,
		svc: svc,
	}
}

func (srv *serverService2) Wrap(m MiddlewareService2) {
	srv.svc = m(srv.svc)
	srv.set = srv.svc.Set
}

func (srv *serverService2) Set(ctx context.Context, req types.BaseRequest) (resp *types.BaseResponse, err error) {
	return srv.set(ctx, req)
}

func (srv *serverService2) WrapSet(m MiddlewareService2Set) {
	srv.set = m(srv.set)
}

func (srv *serverService2) WithTrace() {
	srv.Wrap(traceMiddlewareService2)
}

func (srv *serverService2) WithMetrics() {
	srv.Wrap(metricsMiddlewareService2)
}

func (srv *serverService2) WithLog() {
	srv.Wrap(loggerMiddlewareService2())
}
