// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service2

import (
	"time"

	"github.com/gofiber/fiber/v2"
	uuid "github.com/google/uuid"
)

type ServiceRoute interface {
	SetRoutes(route *fiber.App)
}

type Option func(srv *Server)
type Handler = fiber.Handler
type ErrorHandler func(err error) error

func Service(svc ServiceRoute) Option {
	return func(srv *Server) {
		if srv.srvHTTP != nil {
			svc.SetRoutes(srv.Fiber())
		}
	}
}

func Service2(svc *httpService2) Option {
	return func(srv *Server) {
		if srv.srvHTTP != nil {
			srv.httpService2 = svc
			svc.maxBatchSize = srv.maxBatchSize
			svc.maxParallelBatch = srv.maxParallelBatch
			svc.SetRoutes(srv.Fiber())
		}
	}
}

func SetFiberCfg(cfg fiber.Config) Option {
	return func(srv *Server) {
		srv.config = cfg
		srv.config.DisableStartupMessage = true
	}
}

func SetReadBufferSize(size int) Option {
	return func(srv *Server) {
		srv.config.ReadBufferSize = size
	}
}

func SetWriteBufferSize(size int) Option {
	return func(srv *Server) {
		srv.config.WriteBufferSize = size
	}
}

func MaxBodySize(max int) Option {
	return func(srv *Server) {
		srv.config.BodyLimit = max
	}
}

func MaxBatchSize(size int) Option {
	return func(srv *Server) {
		srv.maxBatchSize = size
	}
}

func MaxBatchWorkers(size int) Option {
	return func(srv *Server) {
		srv.maxParallelBatch = size
	}
}

func ReadTimeout(timeout time.Duration) Option {
	return func(srv *Server) {
		srv.config.ReadTimeout = timeout
	}
}

func WriteTimeout(timeout time.Duration) Option {
	return func(srv *Server) {
		srv.config.WriteTimeout = timeout
	}
}

func WithRequestID(headerName string) Option {
	return func(srv *Server) {
		srv.headerHandlers[headerName] = func(value string) Header {
			if value == "" {
				value = uuid.New().String()
			}
			return Header{

				LogKey:        "requestID",
				LogValue:      value,
				ResponseKey:   headerName,
				ResponseValue: value,
				SpanKey:       "requestID",
				SpanValue:     value,
			}
		}
	}
}

func WithHeader(headerName string, handler HeaderHandler) Option {
	return func(srv *Server) {
		srv.headerHandlers[headerName] = handler
	}
}

func Use(args ...interface{}) Option {
	return func(srv *Server) {
		if srv.srvHTTP != nil {
			srv.srvHTTP.Use(args...)
		}
	}
}
