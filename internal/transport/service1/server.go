// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service1

import (
	"context"
	"encoding/json"
	"io"
	"os"
	"tg-example/internal/transport/service1/tracer"

	"github.com/gofiber/fiber/v2"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	attribute "go.opentelemetry.io/otel/attribute"
)

type Server struct {
	log zerolog.Logger

	httpAfter  []Handler
	httpBefore []Handler

	config fiber.Config

	srvHTTP    *fiber.App
	srvHealth  *fiber.App
	srvMetrics *fiber.App

	reporterCloser io.Closer

	maxBatchSize     int
	maxParallelBatch int

	httpService1   *httpService1
	headerHandlers map[string]HeaderHandler
}

func New(log zerolog.Logger, options ...Option) (srv *Server) {

	srv = &Server{
		config:           fiber.Config{DisableStartupMessage: true},
		headerHandlers:   make(map[string]HeaderHandler),
		log:              log,
		maxBatchSize:     defaultMaxBatchSize,
		maxParallelBatch: defaultMaxParallelBatch,
	}
	for _, option := range options {
		option(srv)
	}
	srv.srvHTTP = fiber.New(srv.config)
	srv.srvHTTP.Use(recoverHandler)
	srv.srvHTTP.Use(tracer.Middleware())
	srv.srvHTTP.Use(srv.setLogger)
	srv.srvHTTP.Use(srv.logLevelHandler)
	srv.srvHTTP.Use(srv.headersHandler)
	for _, option := range options {
		option(srv)
	}
	srv.srvHTTP.Post("/", srv.serveBatch)
	return
}

func (srv *Server) Fiber() *fiber.App {
	return srv.srvHTTP
}

func (srv *Server) WithLog() *Server {
	if srv.httpService1 != nil {
		srv.httpService1 = srv.Service1().WithLog()
	}
	return srv
}

func (srv *Server) ServeHealth(address string, response interface{}) {
	srv.srvHealth = fiber.New(fiber.Config{DisableStartupMessage: true})
	srv.srvHealth.Get("/health", func(ctx *fiber.Ctx) error {
		return ctx.JSON(response)
	})
	go func() {
		err := srv.srvHealth.Listen(address)
		ExitOnError(srv.log, err, "serve health on "+address)
	}()
}

func sendResponse(ctx *fiber.Ctx, resp interface{}) (err error) {
	ctx.Response().Header.SetContentType("application/json")
	if err = json.NewEncoder(ctx).Encode(resp); err != nil {
		log.Ctx(ctx.UserContext()).Error().Err(err).Str("body", string(ctx.Body())).Msg("response write error")
	}
	return
}

func (srv *Server) Shutdown() {
	if srv.srvHTTP != nil {
		_ = srv.srvHTTP.Shutdown()
	}
	if srv.srvHealth != nil {
		_ = srv.srvHealth.Shutdown()
	}
	if srv.srvMetrics != nil {
		_ = srv.srvMetrics.Shutdown()
	}
}

func (srv *Server) WithTrace(ctx context.Context, appName string, endpoint string, attributes ...attribute.KeyValue) *Server {

	tracer.Init(ctx, appName, endpoint, attributes...)
	if srv.httpService1 != nil {
		srv.httpService1 = srv.Service1().WithTrace()
	}
	return srv
}

func (srv *Server) WithMetrics() *Server {
	if VersionGauge == nil {
		VersionGauge = promauto.NewGaugeVec(prometheus.GaugeOpts{
			Help:      "Versions of service parts",
			Name:      "count",
			Namespace: "service",
			Subsystem: "versions",
		}, []string{"part", "version", "hostname"})
	}
	if RequestCount == nil {
		RequestCount = promauto.NewCounterVec(prometheus.CounterOpts{
			Help:      "Number of requests received",
			Name:      "count",
			Namespace: "service",
			Subsystem: "requests",
		}, []string{"service", "method", "success", "errCode"})
	}
	if RequestCountAll == nil {
		RequestCountAll = promauto.NewCounterVec(prometheus.CounterOpts{
			Help:      "Number of all requests received",
			Name:      "all_count",
			Namespace: "service",
			Subsystem: "requests",
		}, []string{"service", "method", "success", "errCode"})
	}
	if RequestLatency == nil {
		RequestLatency = promauto.NewHistogramVec(prometheus.HistogramOpts{
			Help:      "Total duration of requests in microseconds",
			Name:      "latency_microseconds",
			Namespace: "service",
			Subsystem: "requests",
		}, []string{"service", "method", "success", "errCode"})
	}
	hostname, _ := os.Hostname()
	VersionGauge.WithLabelValues("tg", VersionTg, hostname).Set(1)
	if srv.httpService1 != nil {
		srv.httpService1 = srv.Service1().WithMetrics()
	}
	return srv
}

func (srv *Server) Service1() *httpService1 {
	return srv.httpService1
}
