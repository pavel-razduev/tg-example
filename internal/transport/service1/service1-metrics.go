// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service1

import (
	"context"
	"strconv"
	"tg-example/contracts"
	"tg-example/contracts/types"
	"time"
)

type metricsService1 struct {
	next contracts.Service1
}

func metricsMiddlewareService1(next contracts.Service1) contracts.Service1 {
	return &metricsService1{next: next}
}

func (m metricsService1) Get(ctx context.Context, req types.BaseRequest) (resp *types.BaseResponse, err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("service1", "get", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("service1", "get", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("service1", "get", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.Get(ctx, req)
}
