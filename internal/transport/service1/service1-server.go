// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service1

import (
	"context"
	"tg-example/contracts"
	"tg-example/contracts/types"
)

type serverService1 struct {
	svc contracts.Service1
	get Service1Get
}

type MiddlewareSetService1 interface {
	Wrap(m MiddlewareService1)
	WrapGet(m MiddlewareService1Get)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerService1(svc contracts.Service1) *serverService1 {
	return &serverService1{
		get: svc.Get,
		svc: svc,
	}
}

func (srv *serverService1) Wrap(m MiddlewareService1) {
	srv.svc = m(srv.svc)
	srv.get = srv.svc.Get
}

func (srv *serverService1) Get(ctx context.Context, req types.BaseRequest) (resp *types.BaseResponse, err error) {
	return srv.get(ctx, req)
}

func (srv *serverService1) WrapGet(m MiddlewareService1Get) {
	srv.get = m(srv.get)
}

func (srv *serverService1) WithTrace() {
	srv.Wrap(traceMiddlewareService1)
}

func (srv *serverService1) WithMetrics() {
	srv.Wrap(metricsMiddlewareService1)
}

func (srv *serverService1) WithLog() {
	srv.Wrap(loggerMiddlewareService1())
}
