// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service1

import (
	"context"
	"tg-example/contracts"
	"tg-example/contracts/types"
	"tg-example/internal/transport/service1/viewer"
	"time"

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

type loggerService1 struct {
	next contracts.Service1
}

func loggerMiddlewareService1() MiddlewareService1 {
	return func(next contracts.Service1) contracts.Service1 {
		return &loggerService1{next: next}
	}
}

func (m loggerService1) Get(ctx context.Context, req types.BaseRequest) (resp *types.BaseResponse, err error) {
	logger := log.Ctx(ctx).With().Str("service", "Service1").Str("method", "get").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "service1.get",
				"request":  viewer.Sprintf("%+v", requestService1Get{Req: req}),
				"response": viewer.Sprintf("%+v", responseService1Get{Resp: resp}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call get")
			return
		}
		logger.Info().Func(logHandle).Msg("call get")
	}(time.Now())
	return m.next.Get(ctx, req)
}
