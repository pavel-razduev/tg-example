// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service1

import (
	"context"
	"fmt"
	"os"
	"strconv"
	"tg-example/pkg/clients/service1/cb"
	"tg-example/pkg/clients/service1/hasher"
	"tg-example/pkg/clients/service1/jsonrpc"
	"time"
)

type ClientJsonRPC struct {
	name string

	rpc     *jsonrpc.ClientRPC
	rpcOpts []jsonrpc.Option

	cache cache

	cbCfg cb.Settings
	cb    *cb.CircuitBreaker

	fallbackTTL time.Duration

	errorDecoder ErrorDecoder
}

func New(endpoint string, opts ...Option) (cli *ClientJsonRPC) {

	hostname, _ := os.Hostname()
	cli = &ClientJsonRPC{
		errorDecoder: defaultErrorDecoder,
		fallbackTTL:  time.Hour * 24,
		name:         hostname + "_" + "tg-example",
	}
	cli.applyOpts(opts)
	cli.rpc = jsonrpc.NewClient(endpoint, cli.rpcOpts...)
	cli.cb = cb.NewCircuitBreaker("tg-example", cli.cbCfg)
	return
}

func (cli *ClientJsonRPC) Service1() *ClientService1 {
	return &ClientService1{ClientJsonRPC: cli}
}

func (cli *ClientJsonRPC) proceedResponse(ctx context.Context, callMethod func(request any) (response *jsonrpc.ResponseRPC, err error), request any, fallbackCheck func(error) bool, methodResponse any) (err error) {

	cacheKey, _ := hasher.Hash(request)
	err = cli.cb.Execute(func() (err error) {
		var rpcResponse *jsonrpc.ResponseRPC
		rpcResponse, err = callMethod(request)
		if rpcResponse != nil && rpcResponse.Error != nil {
			if cli.errorDecoder != nil {
				err = cli.errorDecoder(rpcResponse.Error.Raw())
			} else {
				err = fmt.Errorf(rpcResponse.Error.Message)
			}
			return
		}
		return rpcResponse.GetObject(&methodResponse)
	}, cb.IsSuccessful(func(err error) (success bool) {
		if fallbackCheck != nil {
			return fallbackCheck(err)
		}
		if success = cli.cb.IsSuccessful()(err); success {
			if cli.cache != nil && cacheKey != 0 {
				_ = cli.cache.SetTTL(ctx, strconv.FormatUint(cacheKey, 10), methodResponse, cli.fallbackTTL)
			}
		}
		return
	}), cb.Fallback(func(err error) error {
		if cli.cache != nil && cacheKey != 0 {
			_, _, err = cli.cache.GetTTL(ctx, strconv.FormatUint(cacheKey, 10), &methodResponse)
		}
		return err
	}))
	return
}
