// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package service2

import (
	"context"
	"fmt"
	"tg-example/contracts/types"
	"tg-example/pkg/clients/service2/jsonrpc"
)

type ClientService2 struct {
	*ClientJsonRPC
}

type retService2Set = func(resp *types.BaseResponse, err error)

func (cli *ClientService2) Set(ctx context.Context, req types.BaseRequest) (resp *types.BaseResponse, err error) {

	request := requestService2Set{Req: req}
	var response responseService2Set
	var rpcResponse *jsonrpc.ResponseRPC
	if rpcResponse, err = cli.rpc.Call(ctx, "service2.set", request); err != nil || rpcResponse == nil {
		return
	}
	if rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
		return
	}
	if err = rpcResponse.GetObject(&response); err != nil {
		return
	}
	return response.Resp, err
}

func (cli *ClientService2) ReqSet(ctx context.Context, callback retService2Set, req types.BaseRequest) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "service2.set",
		Params:  requestService2Set{Req: req},
	}}
	if callback != nil {
		var response responseService2Set
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			if err == nil && rpcResponse != nil {
				if rpcResponse.Error != nil {
					if cli.errorDecoder != nil {
						err = cli.errorDecoder(rpcResponse.Error.Raw())
					} else {
						err = fmt.Errorf(rpcResponse.Error.Message)
					}
				} else {
					err = rpcResponse.GetObject(&response)
				}
			}
			callback(response.Resp, err)
		}
	}
	return
}
