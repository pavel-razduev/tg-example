// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package example

import (
	"context"
	"tg-example/pkg/clients/example/cb"
	"tg-example/pkg/clients/example/jsonrpc"
)

type RequestRPC struct {
	retHandler rpcCallback
	rpcRequest *jsonrpc.RequestRPC
}

type rpcCallback func(err error, response *jsonrpc.ResponseRPC)

func (cli *ClientJsonRPC) Batch(ctx context.Context, requests ...RequestRPC) {

	var rpcRequests jsonrpc.RequestsRPC
	callbacks := make(map[jsonrpc.ID]rpcCallback)
	for _, request := range requests {
		rpcRequests = append(rpcRequests, request.rpcRequest)
		callbacks[request.rpcRequest.ID] = request.retHandler
	}
	var err error
	var rpcResponses jsonrpc.ResponsesRPC
	if cli.cb.State() == cb.StateClosed {
		rpcResponses, err = cli.rpc.CallBatch(ctx, rpcRequests)
		if rpcResponses == nil {
			return
		}
		for id, response := range rpcResponses.AsMap() {
			if callback := callbacks[id]; callback != nil {
				callback(err, response)
			}
		}
		return
	}
	for _, callback := range callbacks {
		callback(cb.ErrOpenState, nil)
	}
}
